// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProjectStatus {
  OPEN
  INPROGRESS
  CLOSED
}

model Admin {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
}

model Company {
  id             Int                  @id @default(autoincrement())
  email          String               @unique
  password       String
  verified       Boolean              @default(false)
  onboarded      Boolean              @default(false)
  name           String
  description    String               @default("")
  abn            String
  profilePic     String               @default("") // Encoded as base64
  projects       Project[]
  companyLinks   CompanyLink[]
  reviews        CompanyReview[]
  reviewsWritten ProfessionalReview[]
}

model CompanyLink {
  id        Int     @id @default(autoincrement())
  name      String
  url       String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int
}

model CompanyReview {
  id        Int          @id @default(autoincrement())
  score     Int
  message   String       @default("")
  author    Professional @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  subject   Company      @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId Int
  project   Project      @relation(fields: [projectId], references: [id])
  projectId Int
}

model Professional {
  id             Int                  @id @default(autoincrement())
  email          String               @unique
  password       String
  verified       Boolean              @default(false)
  onboarded      Boolean              @default(false)
  firstName      String
  lastName       String
  description    String               @default("")
  skills         String[]
  profilePic     String               @default("") // Encoded as base64
  socialLinks    SocialLink[]
  certLinks      CertLink[]
  projects       Project[]
  requests       Request[]
  reviews        ProfessionalReview[]
  reviewsWritten CompanyReview[]
}

model SocialLink {
  id             Int          @id @default(autoincrement())
  name           String
  url            String
  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  professionalId Int
}

model CertLink {
  id             Int          @id @default(autoincrement())
  name           String
  url            String
  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  professionalId Int
}

model ProfessionalReview {
  id        Int          @id @default(autoincrement())
  score     Int
  message   String       @default("")
  author    Company      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  subject   Professional @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId Int
  project   Project      @relation(fields: [projectId], references: [id])
  projectId Int
}

model Project {
  id                     Int                  @id @default(autoincrement())
  title                  String
  publicDescription      String               @default("")
  privateDescription     String               @default("")
  creationDate           DateTime             @default(now())
  tags                   String[]
  inPerson               Boolean
  location               String               @default("") // Set this if inPerson is true
  status                 ProjectStatus        @default(OPEN)
  company                Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId              Int
  professionals          Professional[]
  requests               Request[]
  reviewsOfCompany       CompanyReview[]
  reviewsOfProfessionals ProfessionalReview[]
}

model Request {
  id             Int          @id @default(autoincrement())
  message        String
  creationDate   DateTime     @default(now())
  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  professionalId Int
  project        Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId      Int
}
