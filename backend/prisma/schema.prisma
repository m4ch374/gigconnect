// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProjectStatus {
  OPEN
  INPROGRESS
  CLOSED
}

model Admin {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
}

model Company {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  verified     Boolean       @default(false)
  name         String
  address      String?
  description  String?
  abn          String
  projects     Project[]
  companyLinks CompanyLink[]
}

model CompanyLink {
  id        Int     @id @default(autoincrement())
  name      String
  url       String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int
}

model Professional {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  password    String
  verified    Boolean      @default(false)
  firstName   String
  lastName    String
  description String?
  skills      String[]
  socialLinks SocialLink[]
  certLinks   CertLink[]
  projects    Project[]
  requests    Request[]
}

model SocialLink {
  id             Int          @id @default(autoincrement())
  name           String
  url            String
  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  professionalId Int
}

model CertLink {
  id             Int          @id @default(autoincrement())
  name           String
  url            String
  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  professionalId Int
}

model Project {
  id                 Int            @id @default(autoincrement())
  title              String
  publicDescription  String?
  privateDescription String?
  creationDate       DateTime       @default(now())
  tags               String[]
  inPerson           Boolean
  location           String? // Set this if inPerson is true
  status             ProjectStatus  @default(OPEN)
  company            Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId          Int
  professionals      Professional[]
  requests           Request[]
}

model Request {
  id             Int          @id @default(autoincrement())
  message        String
  creationDate   DateTime     @default(now())
  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  professionalId Int
  project        Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId      Int
}
